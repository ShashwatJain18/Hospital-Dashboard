// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") != "" ? env("DATABASE_URL") : "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  avatar    String?
  clinicAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages  Message[]
  appointments Appointment[]
  supportTickets SupportTicket[]
  settings  Settings?

  @@map("users")
}

model Patient {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  dateOfBirth DateTime?
  gender      String?
  address     String?
  notes       String?
  allergies   String?
  lastVisit   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  messages     Message[]
  appointments Appointment[]
  supportTickets SupportTicket[]

  @@map("patients")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  recipientId String?
  patientId   String?
  isRead      Boolean  @default(false)
  attachments String?  // JSON string for file attachments
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  patientId   String
  doctorId    String
  status      String   @default("scheduled") // scheduled, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  User    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model SupportTicket {
  id          String   @id @default(cuid())
  subject     String
  description String
  status      String   @default("open") // open, pending, closed
  priority    String   @default("medium") // low, medium, high, urgent
  patientId   String?
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient      Patient? @relation(fields: [patientId], references: [id], onDelete: SetNull)
  assignedUser User?    @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  replies      TicketReply[]

  @@map("support_tickets")
}

model TicketReply {
  id        String   @id @default(cuid())
  content   String
  ticketId  String
  authorId  String
  createdAt DateTime @default(now())

  // Relations
  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_replies")
}

model Settings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  theme                 String  @default("dark")
  defaultAppointmentLength Int  @default(30) // minutes
  notifications         Boolean @default(true)
  timezone              String  @default("UTC")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}
